Description: Use legacy version 0.92.2 of ruby-beautify gem
 Sonic Pi wants the version 0.92.2 of the ruby-beautify gem. However,
 that gem has seen a total rewrite since that version. The current
 version 0.97.4 is now a different software with a different API and
 different behaviour under the same package name. The Debian version of
 the gem is that new and updated gem. To address this and to avoid name
 space issues, this patch renames the old version to "legacy" and
 installs it in /usr/lib/sonic-pi/server/ruby/vendor/
 <URL: https://github.com/samaaron/sonic-pi/pull/943>
 <URL: https://github.com/samaaron/sonic-pi/issues/928>
Forwarded: not-needed
Author: Hanno Zulla <kontakt@hanno.de>
Last-Update: 2016-02-04

--- a/app/server/ruby/lib/sonicpi/runtime.rb
+++ b/app/server/ruby/lib/sonicpi/runtime.rb
@@ -38,7 +38,7 @@
 require 'thread'
 require 'fileutils'
 require 'set'
-require 'ruby-beautify'
+require_relative '../../../ruby/vendor/ruby-beautify/lib/ruby-beautify-legacy'
 require 'securerandom'
 require 'active_support/core_ext/integer/inflections'
 
@@ -1214,7 +1214,7 @@
     end
     def beautify_ruby_source(source)
       source = source << "\n" unless source.end_with? "\n"
-      RBeautify.beautify_string :ruby, source
+      RBeautifyLegacy.beautify_string :ruby, source
     end
 
     def normalise_buffer_name(name)
--- a/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify.rb
+++ b/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify.rb
@@ -1,26 +1,26 @@
-require "ruby-beautify/version"
-require 'ruby-beautify/block_start'
-require 'ruby-beautify/block_end'
-require 'ruby-beautify/block_matcher'
-require 'ruby-beautify/language'
-require 'ruby-beautify/line'
-require 'ruby-beautify/config/ruby'
+require_relative "ruby-beautify-legacy/version"
+require_relative 'ruby-beautify-legacy/block_start'
+require_relative 'ruby-beautify-legacy/block_end'
+require_relative 'ruby-beautify-legacy/block_matcher'
+require_relative 'ruby-beautify-legacy/language'
+require_relative 'ruby-beautify-legacy/line'
+require_relative 'ruby-beautify-legacy/config/ruby'
 
-module RBeautify
+module RBeautifyLegacy
   def self.beautify_string(language, source, use_tabs=false)
     dest = ""
     block = nil
 
-    unless language.is_a? RBeautify::Language
-      language = RBeautify::Language.language(language)
+    unless language.is_a? RBeautifyLegacy::Language
+      language = RBeautifyLegacy::Language.language(language)
     end
 
     source.lines.each_with_index do |line_content, line_number|
-      line = RBeautify::Line.new(language, line_content, line_number, block, use_tabs)
+      line = RBeautifyLegacy::Line.new(language, line_content, line_number, block, use_tabs)
       dest += line.format
       block = line.block
     end
 
     return dest
   end
-end # module RBeautify
+end # module RBeautifyLegacy
--- a/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/block_end.rb
+++ b/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/block_end.rb
@@ -1,4 +1,4 @@
-module RBeautify
+module RBeautifyLegacy
 
   class BlockEnd
 
--- a/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/block_matcher.rb
+++ b/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/block_matcher.rb
@@ -1,4 +1,4 @@
-module RBeautify
+module RBeautifyLegacy
 
   class BlockMatcher
 
@@ -77,7 +77,7 @@
 
     def parse_block_start(string, parent_block, offset, line_number)
       if !string.empty? && (match = starts.match(string))
-        RBeautify::BlockStart.new(self, parent_block, line_number, offset + match.begin(0), match[0], match.post_match)
+        RBeautifyLegacy::BlockStart.new(self, parent_block, line_number, offset + match.begin(0), match[0], match.post_match)
       end
     end
 
--- a/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/block_start.rb
+++ b/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/block_start.rb
@@ -1,4 +1,4 @@
-module RBeautify
+module RBeautifyLegacy
 
   class BlockStart
 
@@ -105,11 +105,11 @@
                 # the match then this match should be skipped
                 return parse_explicit_block_end(match.post_match, offset + escape_chars[0].size + match[0].length)
               else
-                return RBeautify::BlockEnd.new(self, offset + match.begin(0), match[0], match.post_match)
+                return RBeautifyLegacy::BlockEnd.new(self, offset + match.begin(0), match[0], match.post_match)
               end
             end
           elsif negate_ends_match?
-            return RBeautify::BlockEnd.new(self, offset, '', string)
+            return RBeautifyLegacy::BlockEnd.new(self, offset, '', string)
           end
 
         end
--- a/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/config/ruby.rb
+++ b/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/config/ruby.rb
@@ -1,8 +1,8 @@
 # define ruby language
 
-unless RBeautify::Language.language(:ruby)
+unless RBeautifyLegacy::Language.language(:ruby)
 
-  ruby = RBeautify::Language.add_language(:ruby)
+  ruby = RBeautifyLegacy::Language.add_language(:ruby)
 
   pre_keyword_boundary = '(^|[^a-z0-9A-Z:._])' # like \b but with : , . _ all added to list of exceptions
   start_statement_boundary = '(^|(;|=)\s*)'
--- a/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/language.rb
+++ b/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/language.rb
@@ -1,4 +1,4 @@
-module RBeautify
+module RBeautifyLegacy
   class Language
 
     @@languages = {}
--- a/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/line.rb
+++ b/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/line.rb
@@ -1,4 +1,4 @@
-module RBeautify
+module RBeautifyLegacy
   class Line
 
     attr_reader :language, :content, :line_number, :original_block, :block, :indent_character
--- a/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/version.rb
+++ b/app/server/ruby/vendor/ruby-beautify/lib/ruby-beautify/version.rb
@@ -1,3 +1,3 @@
-module RBeautify
+module RBeautifyLegacy
   VERSION = "0.92.2"
 end
